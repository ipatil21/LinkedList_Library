/// @brief ensuring the inclusion of this header file only once#pragma once/// @brief required to override interface functions from ILinkedList.h#include "../inc/ILinkedList.h"/// @brief required to extend SinglyLLNode to SinglyList#include "../inc/SinglyLLNode.h"/// @briefclass Singly: public ILinkedList, public SinglyLLNode{public:    /// @brief default constructor    Singly();    /// @brief default destructor    ~Singly();    /// @brief inserts node at the first position in the list    /// @param iData data to be added in new node    /// @return true on success    bool InsertAtFirst(int iData) override;    /// @brief inserts node at the last position in the list    /// @param iData data to be added in new node    /// @return true on success    bool InsertAtLast(int iData) override;    /// @brief inserts node at the specified position in the list    /// @param iData data to be added in new node    /// @param iPos  position to add new node in the list    /// @return true on success    bool InsertAtPosition(int iData, int iPos) override;    /// @brief deletes node at the first position in the list    /// @return true on success    bool DeleteAtFirst() override;    /// @brief deletes node at the specified position in the list    /// @param iPos position to add new node in the list    /// @return true on success    bool DeleteAtPosition(int iPos) override;    /// @brief deletes node at the last position in the list    /// @return true on success    bool DeleteAtLast() override;    /// @brief deletes all node in the list    /// @return true on success    bool DeleteAll() override;    /// @brief searches the given iData    /// @param iData data to be searched    /// @return true on success    int SearchData(int iData) override;    /// @brief checks if list is empty or not    /// @return true if list is empty    bool IsListEmpty() override;    /// @brief creates a string which contains list data    /// @return string containing list data    string DisplayListData() override;    /// @brief    /// @return    unsigned int CountNodes() override;    /// @brief    /// @param m_pSecond    /// @return    SinglyLLNode* ConcatList(SinglyLLNode* m_pSecond) override;    /// @brief    /// @param m_pSecond    /// @param iPos    /// @return    SinglyLLNode* ConcatAtPosition(SinglyLLNode* m_pSecond, int iPos) override;    /// @brief    /// @return    void ReverseDisplay() override;    /// @brief    /// @return    SinglyLLNode* ReversePhysical() override;private:    /// @brief    SinglyLLNode* m_pFirst;    /// @brief    unsigned int m_iNodeCount;    /// @brief    /// @return    bool IncrementNodeCount();    /// @brief    /// @return    bool DecrementNodeCount();};